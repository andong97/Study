//穷举法，傻瓜的if..else
public class Solution {
      public int RomanToInt(string s) {
        int tmp = 0;
        bool Last;
        for (int i = 0; i < s.Length; i+=0) {
            if (i == s.Length - 1)
            {
                Last = true;
            }
            else
                Last = false;
            switch (s[i]) {
                case 'I':
                    if (!Last && s[i + 1] == 'V')
                    {
                        tmp += 4;
                        i += 2;
                    }
                    else if (!Last&&s[i + 1] == 'X')
                    {
                        tmp += 9;
                        i += 2;
                    }
                    else {
                        tmp += 1;
                        i++;
                    }
                    break;
                case 'V':
                    tmp += 5;
                    i++;
                    break;
                case 'X':
                    if (!Last&&s[i + 1] == 'L')
                    {
                        tmp += 40;
                        i += 2;
                    }
                    else if (!Last&&s[i + 1] == 'C')
                    {
                        tmp += 90;
                        i += 2;
                    }
                    else {
                        tmp += 10;
                        i++;
                    }
                    break;
                case 'L':
                    tmp += 50;
                    i++;
                    break;
                case 'C':
                    if (!Last&&s[i + 1] == 'D')
                    {
                        tmp += 400;
                        i += 2;
                    }
                    else if (!Last&&s[i + 1] == 'M')
                    {
                        tmp += 900;
                        i += 2;
                    }
                    else {
                        tmp += 100;
                        i++;
                    }
                    break;
                case 'D':
                    tmp += 500;
                    i++;
                    break;
                case 'M':
                    tmp += 1000;
                    i++;
                    break;
            }
        }
        return tmp;
    }
}


//Hash表
public class Solution {
    public int RomanToInt(string s) {
            int sum = 0;
            Dictionary<string, int> keyValuePairs = new Dictionary<string, int>();
            keyValuePairs.Add("I",1);
            keyValuePairs.Add("V",5);
            keyValuePairs.Add("X",10);
            keyValuePairs.Add("L",50);
            keyValuePairs.Add("C",100);
            keyValuePairs.Add("D",500);
            keyValuePairs.Add("M",1000);
            keyValuePairs.Add("IV",4);
            keyValuePairs.Add("IX",9);
            keyValuePairs.Add("XL",40);
            keyValuePairs.Add("XC", 90);
            keyValuePairs.Add("CD",400);
            keyValuePairs.Add("CM",900);
            //此处还有优化的地方，当我暂时想不到，以后待更新
            for (int i = 0; i < s.Length; i++) {
                if (i >= s.Length - 1) {
                    sum += keyValuePairs[s.Substring(s.Length-1, 1)];
                    return sum;
                }
                char[] tmp = new char[2];
                tmp[0] = s[i];
                tmp[1] = s[i + 1];
                string stmp = new string(tmp);
                if (keyValuePairs.ContainsKey(stmp))
                {
                    sum += keyValuePairs[stmp];
                    i++;
                }
                else
                    sum += keyValuePairs[stmp.Substring(0,1)];
            }

            return sum;
    }
}
