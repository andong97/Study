//暴力查找，三层循环遍历，时间复杂度O(N^3);
public class Solution {
    public int LengthOfLongestSubstring(string s) {
        int i,j,Mlen=1;
        
        for(i=0;i<s.Length;i++){    
            for(j=0;j<s.Length;j++){
                if(FindMaxLength(s,i,j)){
                   Mlen=Math.Max(Mlen,j-i); 
                }
            }
        }
        return Mlen;
    }
    bool FindMaxLength(string s,int start,int end){
        HashSet<char> set = new HashSet<char>();
        for (int i = start; i< end; i++) {
            if (set.Contains(s[i])) {
                return false;
            }set.Add(s[i]);
        }
        return true;
    }
}

//滑动窗口查找
public class Solution {
    public int LengthOfLongestSubstring(string s) {
        int i=0,j=0,Mlen=0;
        HashSet<char> settmp = new HashSet<char>();
        while(i<s.Length&&j<s.Length){
            if(!settmp.Contains(s[j])){
                settmp.Add(s[j++]);
                Mlen=Math.Max(Mlen,j-i);
                //j++;
            }else{
                settmp.Remove(s[i++]);
            }
        }
        return Mlen;
    }
}
